=head1 NAME

IO::FD - I/O with less setup overhead

STILL A WORK IN PROGRESS

=head1 SYNOPSIS

Create and bind a socket (server):

	use IO::FD
	use Socket ":all";

	die "Error creating socket"
		unless IO::FD::socket(my $listen_fd, AF_INET,SOCK_STREAM,0);

	my ($err,@sockaddr)=addrinfo "0.0.0.0", 80, {
		family=>AF_INET,
		socktype=>SOCK_STREAM,
		flags=>AI_NUMERICHOST|AI_PASSIVE
	};

	die "Error binding"
		unless FD::IO::bind($listen_fd,$sockaddr[0]{addr});	

	
	die "Error accepting" 
		unless IO::FD::accept(my $client_fd, $listen_fd);
	
	#read and write here
	

Create and connect a socket(client):
	
	use IO::FD;
	use Socket ":all";

	die "Error creating socket"
		unless IO::FD::socket(my $fd, AF_INET,SOCK_STREAM,0);

	my ($err,@sockaddr)=addrinfo "127.0.0.1", 80, {
		family=>AF_INET,
		socktype=>SOCK_STREAM,
		flags=>AI_NUMERICHOST
	};

	die "Error connecting";
		unless FD::IO::connect($fd, $sockaddr[0]{addr});

	#read and write here

Open a file

	use IO::FD;
	use Fcntl;
	die "could not open file" 
		unless IO::FD::sysopen(my $fd, "path.txt", O_RDONLY);
	

Read/Write/Close an fd

	use IO::FD;

	my $fd; #From FD::IO::Socket, FD::IO::sysopen, POSIX::open

	die "Error writing"
		unless IO::FD::syswrite $fd, "This is some data"; #Length and optional offset

	die "Error reading"
		unless IO::FD::sysread $fd, my $buffer, $length); 

	die "Error closing" 
		unless IO::FD::close $fd;


Advanced:

	fctrl...
	ioctl...


=head1 DESCRIPTION

IO::FD implements system I/O operations on B<file descriptors> instead of perl
B<file handles>. Where it makes sense, the interface to each routine matches
that of perl's filehandle routines.

For example:

	#Perl:
	sysopen(my $file_handle, ...);
	sysread($file_handle, ...);

	#IO::FD
	IO::FD::sysopen(my $file_descriptor, ...);
	IO::FD::sysread($file_descriptor, ...);

It is relatively straight forward to substitute in C<IO::FD> in places where
C<socket>, C<select>, C<accept>, C<bind>, C<sysopen>, C<sysread>,C<syswrite>
and C<close> are used.

The main benefits in using this module:

=over

=item Lower memory with high volume of file descriptors

=item Lower latency for opening a files, sockets

=item Lower latency for accepting sockets, with lower backlog

=item No unessisary encoders setup 


=back


=head1 SUPPORTED SYSTEMS

Currently focused on unix type systems, as this is the natural habitat of a
file descriptor.


TODO:
	Attempt to work with winsock
	Additional advanced fd functions (send fds , sendfile...)

=head1 MOTIVATION

Perl makes working with text files pretty easy, thanks to the use of B<file
handles>. Line splitting, UTF-8, EOL processing etc. are awesome and make your
life easier.

However there are use cases where this is of little help or isn't appreciated.
For example network programming which isn't basic text.

In fact, filehandles can reduce overall performance, because they are preparing for something that will never be used.

=over

=item * No need to understand the file, just send it

Web servers don't generally don't care about file contents. It just needs to
send it quickly when requested. Opening a file via filehandle is quite slow
compared to opening it via file descriptor due to the setup of the buffering
and nice, but unneeded processing.

=item * Unkown and uneeded i/o buffering 

Filehandles use  their own buffering to allow line splitting, etc. When lots of
files are open, potentially this means more memory compared to a file
descriptor.

Also, sockets already have kernel level buffering and generally should be
processed in an event loop as the data is available. Filehandle buffering isn't
really useful in this case.

=item * Network data is not text

While protocols such as HTTP look like text, they allow transmission of binary
data. This makes automatic line conversions and text processing via a
filehandle is impractical. As such setting up a file handle to achieve it is
superfluous.

=item * Open and accept performance

The above points culminate into the fact that C<open/sysopen> and C<accept>
take a large proportion of setup time when servicing small files. This can be
avoided by not using filehandles and simply using the underlying file
descriptor directly.

=back

=head1 LIMITATIONS

Perl does a lot of nice things, which when using file descriptors directly you
will B<loose>:

	Buffering for file read/write performance
	Automatic close when out of scope
	Close on exec
	
If you don't what these mean, it might be best to learn about how it will
impact your program before using this module.

The other main limitation is this module assumes you have file descriptors to
work with on your system.

=head1 APIs

Each of the APIS mimic the perl counterpart as much as possible. Unless explicitly mentioned, they should operate like built in routines.
Any differences are listed.

=head2 Perlish API

=head3 getsockopt


=head3 setsockopt

Note: Implements the integer shorthand as per perldoc -f setsockopt

=head3 sysread

=head3 syswrite

=head3 pipe

=head3 syspipe

A alias of pipe.

=head3 close

=head3 sysclose

An alias of close

=head3 sysopen

=head3 sysseek


Only the 4 argument version of select is supported.

=head3 accept

=head3 sysaccept

Alias to accept

=head3 bind

=head3 sysbind

Alias to bind

=head3 send/sendto

TODO

=head3 recv/recvfrom

TODO

=head3 fctrl

=head3 sysfctrl

Alias to fctrl

TODO

=head3 ioctl

=head3 sysioctl

Alias to ioctl

=head3 stat

=head3 lstat


TODO


=head3 readline

	#SLURP A FILE
	local $/=undef;
	my $slurp=IO::FD::readline;

		#or
	#SLURP ALL RECORDS
	local $/=\1234;
	my @records=IO::FD::readline;

A read line function is available, but is only operates in file slurp or
record slurp mode. As no buffering is used, It does not attempt to split
lines or read a line at a time like the normal perl readline or  <>
operator

=head2 Extended API

=head3 slurp

	my $data=IO::FD::slurp $path;

Open file at $path, read the contents into scalar and close the file.

=head3 spew 

	IO::FD::spew $path, $data;

Open a file at $path, write $data, close file

=head1 PERFORMANCE

=head2 Open and close a file

=head2 Create a and close a socket

=head2 Accept and close socket

=head2 Echo server connection rate

=head1 SEE ALSO

The L<POSIX> module provides an C<open>, C<close>, C<read> and C<write>
routines which return/work with file descriptors. If you are only concerned
with working with files, this is a better option as it is a core module, and
will give you the purported benefits of this module.  However it does not
provide any networking/socket support.

Perl's built in C<syscall> routine could implement most of this module. However
macos no longer has a syscall interface. That makes C<syscall> a non starter
for me.


=head1 AUTHOR

=head1 REPOSITORTY

=head1 LICENSE

